import os
import _pickle as pickle    # Making sure that cPickle is used
import h5py
from pathlib import Path
from typing import List, Optional


from waffles.data_classes.WaveformSet import WaveformSet
import waffles.Exceptions as we

def WaveformSet_from_hdf5_files(
        folderpath: Optional[str] = None,
        filepath_list: List[str] = [],
        target_extension : str = '.hdf5',
        verbose : bool = True
    ) -> WaveformSet:
    """This function reads a number of hdf5 files which
    should contain WaveformSet objects, and merges them into
    a single WaveformSet object.

    Parameters
    ----------
    folderpath: str
        If given, then the value given to the 'filepath_list'
        parameter is ignored, and the list of filepaths to
        be potentially read is generated by listing all the
        files in the given folder.
    filepath_list: list of strings
        This parameter only makes a difference if the
        'folderpath'parameter is not defined. It is the list
        of paths to the hdf5 files to be read.
    target_extension: str
        The extension of the files to be read. The candidate
        files, up to the values given to the folderpath and
        filepath_list parameters, will be eventually considered
        only if their extension matches this value.
    verbose: bool
        Whether to print functioning-related messages.
    """

    if folderpath is not None:

        folder = Path(folderpath)
        if not folder.is_dir():

            raise Exception(we.GenerateExceptionMessage(
                1,
                'WaveformSet_from_hdf5_files()',
                f"The given folderpath ({folderpath})"
                " is not a valid directory."))

        valid_filepaths = [
            os.path.join(folderpath, filename) 
            for filename in os.listdir(folderpath) 
            if filename.endswith(target_extension)]
    else:

        # Remove possible duplicates
        valid_filepaths = [
            Path(filepath)
            for filepath in set(filepath_list)
            if filepath.endswith(target_extension)]

    if len(valid_filepaths) == 0:
        raise Exception(we.GenerateExceptionMessage(
            2,
            'WaveformSet_from_hdf5_files()',
            f"No valid hdf5 files were found in the "
            "given folder or filepath list."))

    if verbose:

        print(f"In function WaveformSet_from_hdf5_files():"
              f" Found {len(valid_filepaths)} different"
              " valid hdf5 file(s): \n\n", end = '')

        for filepath in valid_filepaths:
            print(f"\t - {filepath}\n", end = '')

        print("\n", end = '')
        print(f"In function WaveformSet_from_hdf5_files():"
              f" Reading file 1/{len(valid_filepaths)} ...")

    # There's at least one entry in valid_filepaths
    # The first WaveformSet is handled separatedly, so
    # that the rest of them can be merged into this one
    output = WaveformSet_from_hdf5_file(valid_filepaths[0])
        
    count = 2

    # If len(valid_filepaths) == 1, then this loop is not executed
    for filepath in valid_filepaths[1:]:

        if verbose:
            print(f"In function WaveformSet_from_hdf5_files():"
                  f" Reading file {count}/{len(valid_filepaths)} ...")
            
        aux = WaveformSet_from_hdf5_file(filepath)
        output.merge(aux)
        count += 1

    if verbose:
        print(f"In function WaveformSet_from_hdf5_files():"
              " Reading finished")

    return output

def WaveformSet_from_hdf5_file(
        path_to_hdf5_file : str,
        ) -> WaveformSet:
                                
    """
    This function gets a path to a file which should be
    a hdf5 of a WaveformSet object, and loads it using 
    the pickle library. It returns the resulting WaveformSet 
    object.

    Parameters
    ----------
    path_to_hdf5_file: str
        Path to the file which will be loaded. Its extension
        must match '.pkl'.

    Returns
    ----------        
    output: WaveformSet
        The WaveformSet object loaded from the given file
    """

    if os.path.isfile(path_to_hdf5_file):
        with h5py.File(path_to_hdf5_file, 'r')  as f:
            raw_wfset=f['wfset'][:]
        output = pickle.loads(raw_wfset.tobytes())
    else:
        raise Exception(
            we.GenerateExceptionMessage(
                1, 
                'WaveformSet_from_hdf5_file()',
                f"The given path ({path_to_hdf5_file}) "
                "does not point to an existing file."))
    
    if not isinstance(output, WaveformSet):
        raise Exception(
            we.GenerateExceptionMessage(2,
            'WaveformSet_from_hdf5_file()',
            "The object loaded from the given "
            "file is not a WaveformSet object."))
    
    return output